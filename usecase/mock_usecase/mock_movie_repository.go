// Code generated by MockGen. DO NOT EDIT.
// Source: .\movie_repository.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"

	domain "github.com/atbys/koremiyo/domain"
	usecase "github.com/atbys/koremiyo/usecase"
	gomock "github.com/golang/mock/gomock"
)

// MockMovieRepository is a mock of MovieRepository interface.
type MockMovieRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMovieRepositoryMockRecorder
}

// MockMovieRepositoryMockRecorder is the mock recorder for MockMovieRepository.
type MockMovieRepositoryMockRecorder struct {
	mock *MockMovieRepository
}

// NewMockMovieRepository creates a new mock instance.
func NewMockMovieRepository(ctrl *gomock.Controller) *MockMovieRepository {
	mock := &MockMovieRepository{ctrl: ctrl}
	mock.recorder = &MockMovieRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieRepository) EXPECT() *MockMovieRepositoryMockRecorder {
	return m.recorder
}

// FindById mocks base method.
func (m *MockMovieRepository) FindById(arg0 int) (*domain.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", arg0)
	ret0, _ := ret[0].(*domain.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockMovieRepositoryMockRecorder) FindById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockMovieRepository)(nil).FindById), arg0)
}

// FindClipsByUserId mocks base method.
func (m *MockMovieRepository) FindClipsByUserId(arg0 string) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindClipsByUserId", arg0)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindClipsByUserId indicates an expected call of FindClipsByUserId.
func (mr *MockMovieRepositoryMockRecorder) FindClipsByUserId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindClipsByUserId", reflect.TypeOf((*MockMovieRepository)(nil).FindClipsByUserId), arg0)
}

// MockMutualMovieCache is a mock of MutualMovieCache interface.
type MockMutualMovieCache struct {
	ctrl     *gomock.Controller
	recorder *MockMutualMovieCacheMockRecorder
}

// MockMutualMovieCacheMockRecorder is the mock recorder for MockMutualMovieCache.
type MockMutualMovieCacheMockRecorder struct {
	mock *MockMutualMovieCache
}

// NewMockMutualMovieCache creates a new mock instance.
func NewMockMutualMovieCache(ctrl *gomock.Controller) *MockMutualMovieCache {
	mock := &MockMutualMovieCache{ctrl: ctrl}
	mock.recorder = &MockMutualMovieCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMutualMovieCache) EXPECT() *MockMutualMovieCacheMockRecorder {
	return m.recorder
}

// FindById mocks base method.
func (m *MockMutualMovieCache) FindById(arg0 int) (usecase.List, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", arg0)
	ret0, _ := ret[0].(usecase.List)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindById indicates an expected call of FindById.
func (mr *MockMutualMovieCacheMockRecorder) FindById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockMutualMovieCache)(nil).FindById), arg0)
}

// Store mocks base method.
func (m *MockMutualMovieCache) Store(arg0 usecase.List, arg1 int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", arg0, arg1)
	ret0, _ := ret[0].(int)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockMutualMovieCacheMockRecorder) Store(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockMutualMovieCache)(nil).Store), arg0, arg1)
}

// MockMovieOutputPort is a mock of MovieOutputPort interface.
type MockMovieOutputPort struct {
	ctrl     *gomock.Controller
	recorder *MockMovieOutputPortMockRecorder
}

// MockMovieOutputPortMockRecorder is the mock recorder for MockMovieOutputPort.
type MockMovieOutputPortMockRecorder struct {
	mock *MockMovieOutputPort
}

// NewMockMovieOutputPort creates a new mock instance.
func NewMockMovieOutputPort(ctrl *gomock.Controller) *MockMovieOutputPort {
	mock := &MockMovieOutputPort{ctrl: ctrl}
	mock.recorder = &MockMovieOutputPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieOutputPort) EXPECT() *MockMovieOutputPortMockRecorder {
	return m.recorder
}

// ShowIndex mocks base method.
func (m *MockMovieOutputPort) ShowIndex(arg0 *domain.Movie) (*usecase.OutputData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowIndex", arg0)
	ret0, _ := ret[0].(*usecase.OutputData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowIndex indicates an expected call of ShowIndex.
func (mr *MockMovieOutputPortMockRecorder) ShowIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowIndex", reflect.TypeOf((*MockMovieOutputPort)(nil).ShowIndex), arg0)
}

// ShowMovieInfo mocks base method.
func (m *MockMovieOutputPort) ShowMovieInfo(arg0 *domain.Movie) (*usecase.OutputData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowMovieInfo", arg0)
	ret0, _ := ret[0].(*usecase.OutputData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowMovieInfo indicates an expected call of ShowMovieInfo.
func (mr *MockMovieOutputPortMockRecorder) ShowMovieInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowMovieInfo", reflect.TypeOf((*MockMovieOutputPort)(nil).ShowMovieInfo), arg0)
}
